# -*- python -*-
# ex: set syntax=python:

# first, reload each module by name
import slaves
import schedulers
import builders
import status
reload(slaves)
reload(schedulers)
reload(builders)
reload(status)

# then import the relevant symbols from those modules
from slaves import slaves
from schedulers import schedulers
from builders import builders
from status import status

# This is the dictionary that the buildmaster pays attention to.
c = BuildmasterConfig = {}
c['slaves'] = slaves
c['schedulers'] = schedulers
c['builders'] = builders
c['status'] = status

# ###### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Expanse"
c['titleURL'] = "https://expanse.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "https://build.ethdev.com/"

# ###### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # You can leave this at its default for all but the
    # largest installations.
    'db_url': "sqlite:///state.sqlite",
}

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your
# master with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

# ###### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

all_repositories = {
    r'https://github.com/expanse-project/expanse-buildbot.git': 'expanse-buildbot',
    r'https://github.com/expanse-project/expanse-dockers.git': 'expanse-dockers',
    r'https://github.com/expanse-project/cpp-expanse.git': 'cpp-expanse',
    r'https://github.com/expanse-project/go-expanse.git': 'go-expanse',
    r'https://github.com/expanse-project/ethereumj.git': 'ethereumj',
    r'https://github.com/expanse-project/pyethereum.git': 'pyethereum',
    r'https://github.com/expanse-project/pyethapp.git': 'pyethapp',
    r'https://github.com/expanse-project/serpent.git': 'serpent',
    r'https://github.com/expanse-project/tests.git': 'tests',
    r'https://github.com/expanse-project/homebrew-expanse.git': 'homebrew-expanse',
    r'https://github.com/etherex/etherex.git': 'integration'
}


# Codebase generator
def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator


# Builder priorities

def prioritizeBuilders(buildmaster, builders):
    builderPriorities = {
        "Linux C++ master branch": 0,
        "Linux C++ develop branch": 1,
        "Linux Go master branch": 0,
        "Linux Go develop branch": 1,
        "OSX C++ master branch": 0,
        "OSX C++ master brew": 2,
        "OSX C++ develop branch": 1,
        "OSX C++ develop brew": 2,
        "OSX Go master branch": 0,
        "OSX Go master brew": 2,
        "OSX Go develop branch": 1,
        "OSX Go develop brew": 2,
        "Windows C++ master branch": 0,
        "Windows C++ develop branch": 1,
        "Windows Go master branch": 0,
        "Windows Go develop branch": 1
    }
    builders.sort(key=lambda b: builderPriorities.get(b.name, 3))
    return builders

c['prioritizeBuilders'] = prioritizeBuilders
